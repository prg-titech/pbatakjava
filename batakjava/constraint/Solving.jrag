import com.microsoft.z3.Context;
import com.microsoft.z3.Optimize;

aspect ConstraintSolving {

  coll LinkedList<Formula> VersionClassDecl.constraint() root VersionClassDecl;

  public java.util.List<Context> Program.contexts;

  public int Program.solveComponent(int id) {
    java.util.Set<Integer> component = getComponent(id);
    Context ctx = contexts.get(id);
    Optimize s = ctx.mkOptimize();
    for (Integer c: component) {
      if (!typeMap.containsKey(c)) {
        throw new Error(c.toString() + " doesn't represent any type");
      }
      TypeDecl type = typeMap.get(c);
      if (type instanceof VersionClassDecl) {
        VersionClassDecl cls = (VersionClassDecl) type;
        System.err.println(cls.prettyPrint());
        Collection<Formula> constraint = cls.constraint();
      }
    }
    return 0;
  }

  public int Program.solve() {
    // Setting up dependency graph
    initializeGraph();

    contexts = new ArrayList(numComponent());

    // Create a context for each component
    for (int id=0; id<numComponent(); id++) {
      HashMap<String,String> cfg = new HashMap<String,String>();
      cfg.put("model", "true");
      Context ctx = new Context(cfg);
      contexts.add(ctx);
    }

    // Initialize solver constant
    initConst();

    for (int id=0; id<numComponent(); id++) {
      solveComponent(id);
    }

    return 0;
  }



}