import com.microsoft.z3.BoolExpr;
import com.microsoft.z3.IntExpr;

aspect Constraint {

  public Clause Expr.clause(TypeDecl type) {
    return new Clause(new TypeLit(solverConst, type.typeNum()));
  }

  public Clause Expr.clause(Expr other) {
    return new Clause(new VarLit(solverConst, other.solverConst));
  }

  public Clause Literal.clause(TypeDecl type) {
    return new Clause();
  }

  /**
   *  Disjunction of clauses
   */
   public class Formula {
    public java.util.List<Clause> clauses;

    public Formula() { this.clauses = new LinkedList<Clause>(); }

    public Formula(java.util.List<Clause> clauses) { this.clauses = clauses; }

    public Formula(Clause c) {
      this();
      this.clauses.add(c);
    }

    public Formula add(Formula f) {
      java.util.List<Clause> newClauses = new LinkedList();
      for (Clause c: clauses) {
        newClauses.add(c);
      }
      for (Clause fc: f.clauses) {
        if (!fc.isEmpty()) {
          newClauses.add(fc);
        }
      }
      return new Formula(newClauses);
    }

    public Formula add(Clause oc) {
      java.util.List<Clause> newClauses = new LinkedList();
      for (Clause c: clauses) {
        newClauses.add(c);
      }
      if (!oc.isEmpty()) {
        newClauses.add(oc);
      }
      return new Formula(newClauses);
    }

    public Formula multiply(Formula f) {
      if (isEmpty()) {
        return add(f);
      }
      java.util.List<Clause> newClauses = new LinkedList();
      for (Clause c: clauses) {
        if (f.isEmpty()) {
          newClauses.add(c);
        } else {
          for (Clause fc: f.clauses) {
            newClauses.add(c.add(fc));
          }
        }
      }
      return new Formula(newClauses);
    }

    public Formula multiply(Clause oc) {
      if (isEmpty()) {
        return add(oc);
      }
      java.util.List<Clause> newClauses = new LinkedList();
      for (Clause c: clauses) {
        newClauses.add(c.add(oc));
      }
      return new Formula(newClauses);
    } 

    public boolean isEmpty() {
      return clauses.isEmpty();
    }

    public Collection<Formula> toList() {
      Collection<Formula> result = new LinkedList();
      if (clauses.size() > 0) {
        result.add(this);
      }
      return result;
    }

    public BoolExpr convert(Context ctx) {
      java.util.List<BoolExpr> ors = new LinkedList<BoolExpr>();
      for (int i = 0; i < clauses.size(); i++) {
        Clause c = clauses.get(i);
        ors.add(c.convert(ctx));
      }
      BoolExpr[] arrayOrs = new BoolExpr[ors.size()];
      ors.toArray(arrayOrs);
      return ctx.mkOr(arrayOrs);
    }

    @Override
    public String toString() {
      StringBuilder result = new StringBuilder();
      result.append("{");
      for (int i=0; i<clauses.size(); i++) {
        if (i > 0) result.append(" OR ");
        result.append(clauses.get(i).toString());
      }
      result.append("}");
      return result.toString();
    }

  }

  /**
   *  Conjunction of literals
   */
   public class Clause {
    public java.util.List<Lit> lits;

    public Clause() { this.lits = new LinkedList<Lit>(); }

    public Clause(java.util.List<Lit> lits) { this.lits = lits; }

    public Clause(Lit l) {
      this();
      this.lits.add(l);
    }

    public Clause add(Clause c) {
      java.util.List<Lit> newLits = new LinkedList();
      for (Lit l: lits) {
        newLits.add(l);
      }
      for (Lit cl: c.lits) {
        newLits.add(cl);
      }
      return new Clause(newLits);
    }

    public Clause add(Lit ol) {
      java.util.List<Lit> newLits = new LinkedList();
      for (Lit l: lits) {
        newLits.add(l);
      }
      newLits.add(ol);
      return new Clause(newLits);
    }

    public BoolExpr convert(Context ctx) {
      java.util.List<BoolExpr> ands = new LinkedList<BoolExpr>();
      for (int i = 0; i < lits.size(); i++) {
        Lit c = lits.get(i);
        ands.add(c.convert(ctx));
      }
      BoolExpr[] arrayAnds = new BoolExpr[ands.size()];
      ands.toArray(arrayAnds);
      return ctx.mkAnd(arrayAnds);
    }

    public boolean isEmpty() {
      return lits.isEmpty();
    }

    @Override
    public String toString() {
      StringBuilder result = new StringBuilder();
      result.append("(");
      for (int i = 0; i < lits.size(); i++) {
        if (i > 0) result.append(" AND ");
        result.append(lits.get(i).toString());
      }
      result.append(")");
      return result.toString();
    }
  }

  public interface Lit {
    public BoolExpr convert(Context ctx);
  }

  public class TypeLit implements Lit {
    public IntExpr varConst;
    public final Integer typeInt;

    public TypeLit(IntExpr varConst, Integer typeInt) {
      this.varConst = varConst;
      this.typeInt = typeInt;
    }

    public BoolExpr convert(Context ctx) {
      return ctx.mkEq(varConst, 
                      ctx.mkInt(typeInt));
    }

    @Override
    public String toString() {
      return varConst.toString() + ":" + typeInt.toString();
    }
  }

  public class VarLit implements Lit {
    public IntExpr constA;
    public IntExpr constB;

    public VarLit(IntExpr constA, IntExpr constB) {
      this.constA = constA;
      this.constB = constB;
    }

    public BoolExpr convert(Context ctx) {
      return ctx.mkEq(constA, constB);
    }

    @Override
    public String toString() {
      return constA.toString() + "=" + constB.toString();
    }
  }

}