aspect ConstraintVariable {  

  public Integer Program.varCount = 0;

  public Map<Integer,ASTNode> Program.varMap = new HashMap();

  public Integer Program.getVarNum(ASTNode node) {
    Integer count = varCount++;
    varMap.put(count, node);
    return count;
  }

  syn lazy Integer Expr.varNum() = program().getVarNum(this);

  eq Access.varNum() = program().getVarNum(this);

  eq ClassInstanceExpr.varNum() = getAccess().varNum();

  eq Dot.varNum() = lastAccess().varNum();

  eq VarAccess.varNum() = decl().varNum();

  eq VersionTypeAccess.varNum() = getTypeAccess().varNum();

  eq ParVersionTypeAccess.varNum() = getTypeAccess().varNum();

  syn lazy Integer Variable.varNum();

  eq ParameterDeclaration.varNum() = getTypeAccess().varNum();

  eq Declarator.varNum() = declarationType().varNum();

  eq EnumConstant.varNum() = program().getVarNum(this);

  eq CatchParameterDeclaration.varNum() = program().getVarNum(this);
  
  eq InferredParameterDeclaration.varNum() = program().getVarNum(this);

  public String Expr.var() {
    return varNum().toString();
  }

  public IntExpr Expr.solverConst;

  coll LinkedList<Object> Program.initConst() root Program;

  // TODO: only generate the necessary variables
  Access contributes each initConst() to Program.initConst();

  syn Collection<Object> Access.initConst() {
    Context ctx = context();
    solverConst = ctx.mkIntConst(var());
    return Collections.emptyList();
  }

  coll HashSet<IntExpr> TypeDecl.getTerms() root TypeDecl;

  Access contributes each getTerm() to TypeDecl.getTerms();

  syn Collection<IntExpr> Access.getTerm() {
    return Collections.singleton(solverConst);
  }
  
}

aspect ConstraintGeneration {

  public Map<TypeDecl,Model> ParVersionTypeAccess.solutionMap = new HashMap();

  // TODO: no subtyping for now!
  coll LinkedList<Formula> TypeDecl.constraint() root TypeDecl;

  Expr contributes each constraintList() to TypeDecl.constraint();

  syn Collection<Formula> Expr.constraintList() = constraint().toList();

  syn Formula Expr.constraint() = new Formula();

  eq ThisAccess.constraint() = new Formula(new Clause(new TypeLit(solverConst, type().typeNum())));

  eq TypeAccess.constraint() {
    Formula f = new Formula();
    for (TypeDecl type: typeSet()) {
      f = f.add(clause(type));
    }
    return f;
  }

  eq ParVersionTypeAccess.constraint() {
    Formula f = new Formula();

    for (TypeDecl t: typeSet()) {
      if (t.numComponent() < numComponent()) {
        for (Model m: t.models()) {
          if (applicable(t, m)) {
            solutionMap.put(t, m);
            f = f.add(clause(t));
          }
        }
      } else {
        f = f.add(clause(t));
      }
    }

    return f;
  }

  eq AssignExpr.constraint() {
    Optional<Formula> f = getSource().subtype(getDest());
    return f.isPresent() ? f.get() : new Formula();
  }

  eq MethodAccess.constraint() {
    Formula f = new Formula();
    Map<TypeDecl,Collection<MethodDecl>> map = verLookupMethod(name());
    for (TypeDecl qualifierType: map.keySet()) {
      Lit lQualifier = new TypeLit(qualifier().solverConst, qualifierType.typeNum());
      for (MethodDecl method: map.get(qualifierType)) {
        Map<String,VersionArgument> verMap = verMap(method);
        // TODO: check inheritance

        // check arguments
        Optional<Formula> optS = verApplicableAndAccessible(method);
        
        if (!optS.isPresent()) {
          continue;
        }

        Formula s = optS.get();

        for (int i = 0; i < getNumArg(); i++) {
          SimpleSet<TypeDecl> set = method.getParameter(i).getTypeAccess().map(verMap);
          if (set.isSingleton()) {
            Lit lArg = new TypeLit(getArg(i).solverConst, set.singletonValue().typeNum());
            s = s.multiply(new Clause(lArg));
          }
        }

        if (isQualified()) {
          s = s.multiply(new Clause(lQualifier));
        }

        for (TypeDecl returnType: method.getTypeAccess().typeSet()) {
          /**
          *  TODO: constraint on the method declaration's return type
          *        that depends on the existence of version arguments
          */

          // constraint on the method invocation itself
          Lit lReturn = new TypeLit(solverConst, returnType.typeNum());
          f = f.add(s.multiply(new Clause(lReturn)));
        }
      }
    }
    // System.err.println(qualifier().solverConst);
    // System.err.println(prettyPrint());
    // System.err.println(f);
    return f;
  }

  eq ClassInstanceExpr.constraint() {
    Formula f = new Formula();
    // TODO: remove this temporary fix
    if (getAccess() instanceof VersionTypeAccess &&
        ((VersionTypeAccess) getAccess()).getVersionArgument() instanceof VersionVarArgument) {
      return f;
    }
    for (TypeDecl type: typeSet()) {
      Map<String,VersionArgument> verMap = getAccess().verMap(type);
      for (ConstructorDecl constructor: type.constructors()) {
        Optional<Formula> optS = verApplicableAndAccessible(constructor);

        if (!optS.isPresent()) {
          continue;
        }

        Formula s = optS.get();

        for (int i = 0; i < getNumArg(); i++) {
          // TODO: handle version var argument
          SimpleSet<TypeDecl> set
            = constructor.getParameter(i).getTypeAccess().map(verMap);
          if (set.isSingleton()) {
            Lit lArg = new TypeLit(getArg(i).solverConst, set.singletonValue().typeNum());
            s = s.multiply(new Clause(lArg));
          }
        }

        Lit lAccess = new TypeLit(getAccess().solverConst, type.typeNum());
        s = s.multiply(new Clause(lAccess));

        f = f.add(s);
      }
    }
    // System.err.println(prettyPrint());
    // System.err.println(f);
    return f;
  }

  Declarator contributes each constraintList() to TypeDecl.constraint();

  syn Collection<Formula> Declarator.constraintList() = constraint().toList();

  syn lazy Formula Declarator.constraint() {
    if (!hasInit()) {
      return new Formula();
    }
    Optional<Formula> f = getInit().subtype(declarationType());
    // System.err.println(prettyPrint());
    // System.err.println(f);
    return f.isPresent() ? f.get() : new Formula();
  }

  Stmt contributes each constraintList() to TypeDecl.constraint();

  syn Collection<Formula> Stmt.constraintList() = constraint().toList();

  syn lazy Formula Stmt.constraint() = new Formula();

  eq ReturnStmt.constraint() {
    if (hasResult()) {
      Optional<Formula> f = getResult().subtype(returnTypeAccess());
      return f.isPresent() ? f.get() : new Formula();
    }
    return new Formula();
  }

  VersionVariable contributes each constraintList() to TypeDecl.constraint();

  syn Collection<Formula> VersionVariable.constraintList() = constraint().toList();

  syn lazy Formula VersionVariable.constraint() {
    Formula f = new Formula();
    
    SimpleSet<Access> boundSet = boundSet();
    if (boundSet.size() > 1) {
      Iterator<Access> iterator = boundSet.iterator();
      Access access = iterator.next();
      while (iterator.hasNext()) {
        Access otherAccess = iterator.next();
        if (access.context() == otherAccess.context()) {
          f = f.multiply(access.clause(otherAccess));
        }
      }
    }
    return f;
  }

  public Optional<Formula> Expr.subtype(Expr dest) {
    Formula f = new Formula();
    boolean subtype = false;

    for (TypeDecl sourceType: typeSet()) {
      for (TypeDecl destType: dest.typeSet()) {
        Optional<Formula> check = sourceType.versionInstanceOf(destType, this, dest);
        if (check.isPresent()) {
          f = f.add(check.get());
        }
      }
    }

    return Optional.of(f);
  }

}