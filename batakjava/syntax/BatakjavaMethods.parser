MethodDecl method_header =
    modifiers.m? LGUI version_variables.l RGUI type.t IDENTIFIER LPAREN formal_parameter_list.p? RPAREN dims.d? throws.tl?
    {: return new GenericVersionMethodDecl(new Modifiers(m), t.addArrayDims(d), IDENTIFIER, p, tl, new Opt(), l); :}
  | modifiers.m? LGUI version_variables.l RGUI VOID IDENTIFIER LPAREN formal_parameter_list.p? RPAREN throws.tl?
    {: return new GenericVersionMethodDecl(new Modifiers(m), new PrimitiveTypeAccess("void"), IDENTIFIER, p, tl, new Opt(), l); :}
  ;
Access method_invocation =
    primary.p DOT LGUI version_arguments.v RGUI IDENTIFIER LPAREN argument_list.l? RPAREN
      {: return p.qualifiesAccess(new ParVersionMethodAccess(IDENTIFIER, l, v)); :}
  | name.n DOT LGUI version_arguments.v RGUI IDENTIFIER LPAREN argument_list.l? RPAREN 
    {: return n.qualifiesAccess(new ParVersionMethodAccess(IDENTIFIER, l, v));  :}
  | SUPER DOT LGUI version_arguments.v RGUI IDENTIFIER LPAREN argument_list.l? RPAREN 
    {: return new SuperAccess().qualifiesAccess(
                        new ParVersionMethodAccess(IDENTIFIER, l, v));  :}
  | name.n DOT.d1 SUPER DOT.d2 LGUI version_arguments.v RGUI IDENTIFIER LPAREN argument_list.l? RPAREN 
    {: return n.qualifiesAccess(new SuperAccess()).qualifiesAccess(
                        new ParVersionMethodAccess(IDENTIFIER, l, v));  :}
  ;