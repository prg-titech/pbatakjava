ClassDecl class_declaration =
    modifiers.m? CLASS IDENTIFIER VER version_number.v super.s? interfaces.i? class_body.b
      {: return new VersionClassDecl(new Modifiers(m), IDENTIFIER, s, i, b, v); :}
  | modifiers.m? CLASS IDENTIFIER VER version_number.v LGUI version_variables.p RGUI super.s?
    interfaces.i? class_body.b
      {: return new GenericVersionClassDecl(new Modifiers(m), IDENTIFIER, s, i, b, v, p); :}
  ;

Access class_or_interface_type =
    name.n LGUI version_arguments.v RGUI
      {: return new ParVersionTypeAccess(n, v); :}
  | name.n SHARP version_arguments.v SHARP
      {: return new VersionTypeAccess(n, v); :}
  | name.n SHARP version_arguments.va SHARP LGUI version_arguments.vb RGUI
      {: return new ParVersionTypeAccess(new VersionTypeAccess(n, va), vb); :}
  ;

List version_variables =
    version_variable.v                                {: return new List().add(v); :}
  | version_variables.vs COMMA version_variable.v     {: return vs.add(v); :}
  ;

VersionVariable version_variable =
    IDENTIFIER                                        {: return new VersionVariable(IDENTIFIER, new List()); :}
  | version_range
  ;

VersionVariable version_range =
    IDENTIFIER LT version_number.n                    {: return new VersionVariable(IDENTIFIER, new List().add(new VersionLT(n))); :}
  | IDENTIFIER LTEQ version_number.n                  {: return new VersionVariable(IDENTIFIER, new List().add(new VersionLE(n))); :}
  | left_version_range.r LT version_number.n          {: r.addVersionRange(new VersionLT(n)); return r; :}
  | left_version_range.r LTEQ version_number.n        {: r.addVersionRange(new VersionLE(n)); return r; :}
  ;

VersionVariable left_version_range =
    version_number.n LT IDENTIFIER                    {: return new VersionVariable(IDENTIFIER, new List().add(new VersionGT(n))); :}
  | version_number.n LTEQ IDENTIFIER                  {: return new VersionVariable(IDENTIFIER, new List().add(new VersionGE(n))); :}
  ;

List version_arguments = 
    version_argument.v                                {: return new List().add(v); :}
  | version_arguments.vs COMMA version_argument.v     {: return vs.add(v); :}
  ;

VersionArgument version_argument =
    NUMERIC_LITERAL                             {: return new VersionNumArgument(NUMERIC_LITERAL); :}
  | IDENTIFIER                                  {: return new VersionVarArgument(IDENTIFIER); :}
  ;

Version version_number =
    NUMERIC_LITERAL                             {: return new Version(NUMERIC_LITERAL); :}
  ;