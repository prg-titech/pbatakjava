ClassDecl class_declaration =
    modifiers.m? CLASS IDENTIFIER VER version_number.v super.s? interfaces.i? class_body.b
      {: return new VersionClassDecl(new Modifiers(m), IDENTIFIER, s, i, b, v); :}
  | modifiers.m? CLASS IDENTIFIER VER version_number.v GT version_parameters.p LT super.s?
    interfaces.i? class_body.b
      {: return new GenericVersionClassDecl(new Modifiers(m), IDENTIFIER, s, i, b, v, p); :}
  ;

Access class_or_interface_type =
    name.n GT version_arguments.v LT
      {: return new ParVersionTypeAccess(n, v); :}
  | name.n SHARP version_arguments.v SHARP
      {: return new VersionTypeAccess(n, v); :}
  | name.n SHARP version_arguments.va SHARP GT version_arguments.vb LT
      {: return new ParVersionTypeAccess(new VersionTypeAccess(n, va), vb); :}
  ;

List version_parameters = 
    version_parameter.v                               {: return new List().add(v); :}
  | version_parameters.vs COMMA version_parameter.v   {: return vs.add(v); :}
  ;

VersionVariable version_parameter =
    IDENTIFIER                                        {: return new VersionVariable(IDENTIFIER); :}
  ;

List version_arguments = 
    version_argument.v                                {: return new List().add(v); :}
  | version_arguments.vs COMMA version_argument.v     {: return vs.add(v); :}
  ;

VersionArgument version_argument =
    NUMERIC_LITERAL                             {: return new VersionNumArgument(NUMERIC_LITERAL); :}
  | IDENTIFIER                                  {: return new VersionVarArgument(IDENTIFIER); :}
  ;

Version version_number =
    NUMERIC_LITERAL                             {: return new Version(NUMERIC_LITERAL); :}
  ;