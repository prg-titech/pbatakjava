ClassDecl class_declaration =
    modifiers.m? CLASS IDENTIFIER VER version_number.v super.s? interfaces.i? class_body.b
      {: return new VersionClassDecl(new Modifiers(m), IDENTIFIER, s, i, b, v); :}
  | modifiers.m? CLASS IDENTIFIER VER version_number.v LGUI version_parameters.p RGUI super.s?
    interfaces.i? class_body.b
      {: return new GenericVersionClassDecl(new Modifiers(m), IDENTIFIER, s, i, b, v, p); :}
  ;

MethodDecl method_header =
    modifiers.m? LGUI version_parameters.l RGUI type.t IDENTIFIER LPAREN formal_parameter_list.p? RPAREN dims.d? throws.tl?
    {: return new GenericVersionMethodDecl(new Modifiers(m), t.addArrayDims(d), IDENTIFIER, p, tl, new Opt(), l); :}
  | modifiers.m? LGUI version_parameters.l RGUI VOID IDENTIFIER LPAREN formal_parameter_list.p? RPAREN throws.tl?
    {: return new GenericVersionMethodDecl(new Modifiers(m), new PrimitiveTypeAccess("void"), IDENTIFIER, p, tl, new Opt(), l); :}
  ;
Access method_invocation =
    primary.p DOT LGUI version_arguments.v RGUI IDENTIFIER LPAREN argument_list.l? RPAREN
      {: return p.qualifiesAccess(new ParVersionMethodAccess(IDENTIFIER, l, v)); :}
  | name.n DOT LGUI version_arguments.v RGUI IDENTIFIER LPAREN argument_list.l? RPAREN 
    {: return n.qualifiesAccess(new ParVersionMethodAccess(IDENTIFIER, l, v));  :}
  | SUPER DOT LGUI version_arguments.v RGUI IDENTIFIER LPAREN argument_list.l? RPAREN 
    {: return new SuperAccess().qualifiesAccess(
                        new ParVersionMethodAccess(IDENTIFIER, l, v));  :}
  | name.n DOT.d1 SUPER DOT.d2 LGUI version_arguments.v RGUI IDENTIFIER LPAREN argument_list.l? RPAREN 
    {: return n.qualifiesAccess(new SuperAccess()).qualifiesAccess(
                            new ParVersionMethodAccess(IDENTIFIER, l, v));  :}
  ;

Access class_or_interface_type =
    name.n LGUI version_arguments.v RGUI
      {: return new ParVersionTypeAccess(n, v); :}
  | name.n SHARP version_argument.v SHARP
      {: return new VersionTypeAccess(n, v); :}
  | name.n SHARP version_argument.v SHARP LGUI version_arguments.vb RGUI
      {: return new ParVersionTypeAccess(new VersionTypeAccess(n, v), vb); :}
  ;

List version_parameters = 
    version_parameter.v                               {: return new List().add(v); :}
  | version_parameters.vs COMMA version_parameter.v   {: return vs.add(v); :}
  ;

VersionVariable version_parameter =
    IDENTIFIER                                        {: return new VersionVariable(IDENTIFIER); :}
  ;

List version_arguments = 
    version_argument.v                                {: return new List().add(v); :}
  | version_arguments.vs COMMA version_argument.v     {: return vs.add(v); :}
  ;

VersionArgument version_argument =
    NUMERIC_LITERAL                             {: return new VersionNumArgument(NUMERIC_LITERAL); :}
  | IDENTIFIER                                  {: return new VersionVarArgument(IDENTIFIER); :}
  ;

Version version_number =
    NUMERIC_LITERAL                             {: return new Version(NUMERIC_LITERAL); :}
  ;