aspect Overlap {

  public BodyDecl BodyDecl.source = null;
  public boolean BodyDecl.rename = false;

  public void TypeDecl.addNewMethod(BodyDecl body) {
    return;
  }

  public void InterfaceDecl.addNewMethod(BodyDecl body) {
    body.addTo(this);
  }

  public void BodyDecl.addTo(InterfaceDecl i) {
    return;
  }

  public void MethodDecl.addTo(InterfaceDecl i) {
    Collection<MethodDecl> members = i.memberMethods(name());
    String signature = signature();
    boolean hasOverlappingMethod = false;

    Iterator<MethodDecl> membersIterator = members.iterator();
    // TODO: clean this part up
    while (membersIterator.hasNext() && !hasOverlappingMethod) {
      MethodDecl member_i = membersIterator.next();
      TypeDecl member_i_returnType = member_i.type();
      if (member_i.source != null) {
        if (member_i.source instanceof FieldDecl) {
          member_i_returnType = ((FieldDecl) member_i.source).getTypeAccess().typeSet().iterator().next();
        } else if (member_i.source instanceof MethodDecl) {
          member_i_returnType = ((MethodDecl) member_i.source).getTypeAccess().typeSet().iterator().next();
        }
      }
      if (member_i.signature().equals(signature)
          && !member_i_returnType.fullName().equals(type().fullName())) {
            hasOverlappingMethod = true;
      }
    }

    MethodDecl newMethod = treeCopy();

    if (hasOverlappingMethod) {
      String newName = name() + "__" + type().name();
      List<ParameterDeclaration> ps = new List();
      for (ParameterDeclaration p: getParameterList()) {
        ps = ps.add(p.treeCopy());
      }
      newMethod = new MethodDecl(
        getModifiers(),
        getTypeAccess().compileAccess(),
        newName,
        ps,
        new List(),
        new Opt());
      if (source != null) {
        source.rename = true;
      }
    }

    i.addBodyDecl(newMethod);
  }

}