aspect Generation {

  public Program Program.generated;

  public Program Program.compile() {
    generated = new Program();
    generated.state().reset();

    java.util.Set<String> names = new HashSet();

    for (int i = 0; i < numComponent(); i++) {
      for (TypeDecl t: getComponent(i)) {
        String name = t.packageName().equals("") ? t.name() : t.packageName() + "." + t.name();

        CompilationUnit unit = t.compilationUnit();

        if (t.isVersioned()) {
          // generating interface
          List<TypeDecl> is = t.compileInterface();
          List<TypeDecl> ifs = t.compileInterfaceFactory();

          if (names.contains(name)) {
            TypeDecl newInterface = is.iterator().next();
            TypeDecl oldInterface = generated.findInterface(newInterface.packageName(), newInterface.name());
            for (BodyDecl newMethod: newInterface.getBodyDeclList()) {
              oldInterface.addNewMethod(newMethod);
            }

            TypeDecl newFactory = ifs.iterator().next();
            TypeDecl oldFactory = generated.findInterface(newInterface.packageName(), newInterface.name() + "_Factory");

            for (BodyDecl newCons: newFactory.getBodyDeclList()) {
              oldFactory.addBodyDecl(newCons.treeCopy());
            }
          } else {
            CompilationUnit interfaceUnit = unit.compile(is);
            CompilationUnit factoryUnit = unit.compile(t.compileInterfaceFactory());

            generated.addNewCompilationUnit(interfaceUnit);
            generated.addNewCompilationUnit(factoryUnit);

            names.add(name);
          }
        }
      
        // generating class and factory
        List<TypeDecl> cs = t.compileClass();
        CompilationUnit classUnit = unit.compile(cs);
        generated.addNewCompilationUnit(classUnit);

        if (t.isVersioned()) {
          List<TypeDecl> cfs = t.compileClassFactory();
          CompilationUnit classFactoryUnit = unit.compile(cfs);
          generated.addNewCompilationUnit(classFactoryUnit);
        }
      }
    }

    for (String name: names) {
      generated.removeDuplicate(name);
      generated.removeDuplicate(name + "_Factory");
      generated.processMethod(name);
      generated.processConstructor(name);
    }

    return generated;
  }

  public void Program.processMethod(String name) {
    TypeDecl parent = findInterface(name);
    SimpleSet<TypeDecl> classSet = findClassSet(name);
    for (TypeDecl t: classSet) {
      List<BodyDecl> newBodyList = new List();
      for (BodyDecl b: t.getBodyDeclList()) {
        newBodyList = newBodyList.add(b.treeCopy());
      }
      for (BodyDecl b: parent.getBodyDeclList()) {
        if (!t.owns(b)) {
          newBodyList = newBodyList.add(b.addReturnStmt());
        }
      }
      t.setBodyDeclList(newBodyList);
    }
  }

  public void Program.processConstructor(String name) {
    TypeDecl parent = findInterface(name + "_Factory");
    SimpleSet<TypeDecl> factorySet = findFactorySet(name);
    for (TypeDecl t: factorySet) {
      List<BodyDecl> newBodyList = new List();
      for (BodyDecl b: t.getBodyDeclList()) {
        newBodyList = newBodyList.add(b.treeCopy());
      }
      for (BodyDecl b: parent.getBodyDeclList()) {
        if (!t.owns(b)) {
          newBodyList = newBodyList.add(b.addReturnStmt());
        }
      }
      t.setBodyDeclList(newBodyList);
    }
  }

  public void Program.removeDuplicate(String name) {
    TypeDecl t = findInterface(name);
    List<BodyDecl> withoutDuplicate = new List();
    java.util.Set<String> signatures = new HashSet();
    if (t != null) {
      for (BodyDecl b: t.getBodyDeclList()) {
        if (b.isMethodOrConstructor()) {
          String s = ((MethodDecl) b).signature();
          if (!signatures.contains(s)) {
            withoutDuplicate = withoutDuplicate.add(b);
            signatures.add(s);
          }
        }
      }
      t.setBodyDeclList(withoutDuplicate);
    }
  }

  syn nta CompilationUnit CompilationUnit.compile(List<TypeDecl> typeList) {
    CompilationUnit unit = new CompilationUnit(getPackageDecl(), new List(), typeList);
    unit.setFromSource(true);
    unit.setClassSource(getClassSource());
    return unit;
  }
  
  syn nta List<TypeDecl> TypeDecl.compileInterface() = new List();

  eq VersionClassDecl.compileInterface() {
    List<TypeDecl> types = new List();
    List<BodyDecl> bodyList = new List();
    
    for (BodyDecl body: getBodyDeclList()) {
      bodyList = bodyList.addAll(body.compileInterface());

    }
    return new List().add(new InterfaceDecl(
      new Modifiers(new List().add(new Modifier("public"))),
      getID(),
      new List(),
      bodyList));
  }

  eq VersionInterfaceDecl.compileInterface() {
    List<TypeDecl> types = new List();
    List<BodyDecl> bodyList = new List();
    
    for (BodyDecl body: getBodyDeclList()) {
      bodyList = bodyList.addAll(body.compileInterface());
    }

    return new List().add(new InterfaceDecl(
      new Modifiers(new List().add(new Modifier("public"))),
      getID(),
      new List(),
      bodyList));
  }

  syn nta List<TypeDecl> TypeDecl.compileInterfaceFactory() = new List();

  eq VersionClassDecl.compileInterfaceFactory() {
    List<BodyDecl> factoryBodyList = new List();

    for (BodyDecl body: getBodyDeclList()) {
      factoryBodyList = factoryBodyList.addAll(body.compileInterfaceFactory());
    }

    return new List().add(new InterfaceDecl(
      new Modifiers(new List().add(new Modifier("public"))),
      getID() + "_Factory",
      new List(),
      factoryBodyList));
  }

  eq VersionInterfaceDecl.compileInterfaceFactory() {
    List<BodyDecl> factoryBodyList = new List();

    for (BodyDecl body: getBodyDeclList()) {
      factoryBodyList = factoryBodyList.addAll(body.compileInterfaceFactory());
    }

    return new List().add(new InterfaceDecl(
      new Modifiers(new List().add(new Modifier("public"))),
      getID() + "_Factory",
      new List(),
      factoryBodyList));
  }

  syn nta List<TypeDecl> TypeDecl.compileClass() = new List().add(treeCopy());

  eq ClassDecl.compileClass() {
    List<TypeDecl> types = new List();
    List<BodyDecl> bodyList = new List();

    for (BodyDecl body: getBodyDeclList()) {
      bodyList = bodyList.add(body.compile());
    }

    Opt<Access> superAccess = hasSuperClass() ? new Opt(getSuperClass().compileInstanceAccess()) : new Opt();

    types = types.add(new ClassDecl(
      getModifiers(),
      getID(),
      superAccess,
      new List(),
      bodyList));

    return types;
  }

  eq VersionClassDecl.compileClass() {
    List<TypeDecl> types = new List();
    List<BodyDecl> bodyList = new List();

    if (isGenericVersionClassDecl()) {
      GenericVersionClassDecl thisType = (GenericVersionClassDecl) this;
      for (VersionVariable v: thisType.getVersionVariableList()) {
        TypeAccess typeAccess = v.typeAccess();
        TypeDecl type = typeAccess.compileType();
        List<FieldDeclarator> decls = new List().add(new FieldDeclarator(
          v.getID(), new List(), new Opt()));
        bodyList = bodyList.add(new FieldDecl(
          new Modifiers(new List().add(new Modifier("public"))),
          new TypeAccess(type.packageName(), type.name() + "_Factory"),
          decls
        ));
      }
    }

    for (BodyDecl body: getBodyDeclList()) {
      bodyList = bodyList.add(body.compile());
    }

    for (BodyDecl body: getBodyDeclList()) {
      bodyList = bodyList.addAll(body.compileGetterAndSetter());
    }

    Opt<Access> superAccess = hasSuperClass() 
      ? new Opt(getSuperClass().compileInstanceAccess()) : new Opt();

    List<Access> implementList = new List().add(new TypeAccess(packageName(), getID()));

    for (Access implementAccess: getImplementsList()) {
      implementList = implementList.add(implementAccess.compileInstanceAccess());
    }

    types = types.add(new ClassDecl(
      getModifiers(),
      getID() + "_v" + version(), 
      superAccess,
      implementList,
      bodyList));

    return types;
  }

  eq VersionInterfaceDecl.compileClass() {
    List<TypeDecl> types = new List();
    List<BodyDecl> bodyList = new List();

    for (BodyDecl body: getBodyDeclList()) {
      bodyList = bodyList.add(body.compile());
    }

    List<Access> extendList = new List().add(new TypeAccess(packageName(), getID()));

    for (Access extendAccess: getSuperInterfaceList()) {
      extendList = extendList.add(extendAccess.compileInstanceAccess());
    }

    types = types.add(new InterfaceDecl(
      getModifiers(),
      getID() + "_v" + version(),
      extendList,
      bodyList));

    return types;
  }

  syn nta List<TypeDecl> TypeDecl.compileClassFactory() = new List();

  eq ClassDecl.compileClassFactory() = new List();

  eq VersionClassDecl.compileClassFactory() {
    List<TypeDecl> types = new List();
    List<BodyDecl> factoryBodyList = new List();

    for (BodyDecl body: getBodyDeclList()) {
      factoryBodyList = factoryBodyList.addAll(body.compileFactory());
    }

    types = types.add(new ClassDecl(
      new Modifiers(new List().add(new Modifier("public"))),
      getID() + "_v" + version() + "_Factory",
      new Opt(),
      new List().add(new TypeAccess(packageName(), getID() + "_Factory")),
      factoryBodyList));

    return types;
  }  

  eq VersionInterfaceDecl.compileClassFactory() {
    List<TypeDecl> types = new List();
    List<BodyDecl> factoryBodyList = new List();

    for (BodyDecl body: getBodyDeclList()) {
      factoryBodyList = factoryBodyList.addAll(body.compileFactory());
    }

    types = types.add(new ClassDecl(
      new Modifiers(new List().add(new Modifier("public"))),
      getID() + "_v" + version() + "_Factory",
      new Opt(),
      new List().add(new TypeAccess(packageName(), getID() + "_Factory")),
      factoryBodyList));

    return types;
  }

  syn nta BodyDecl BodyDecl.compile() = treeCopy();

  eq ConstructorDecl.compile() {
    List<ParameterDeclaration> params = new List();
    List<Stmt> blockStmtList = new List();

    // TODO: get rid of instanceof from here
    if (hostType().isGenericVersionClassDecl()) {
      GenericVersionClassDecl host = (GenericVersionClassDecl) hostType();
      for (int i = 0; i < host.getNumVersionVariable(); i++) {
        VersionVariable v_i = host.getVersionVariable(i);
        TypeAccess typeAccess_i = v_i.typeAccess();
        TypeDecl type_i = typeAccess_i.compileType();
        params = params.add(new ParameterDeclaration(
          new Modifiers(),
          new TypeAccess(type_i.packageName(), type_i.name() + "_Factory"),
          v_i.getID()
        ));
        blockStmtList = blockStmtList.add(new ExprStmt(
          new AssignSimpleExpr(
            new Dot(
              new ThisAccess(),
              new VarAccess(v_i.getID())
            ),
            new VarAccess(v_i.getID())
          )
        ));
      }
    }

    for (ParameterDeclaration param: getParameterList()) {
      ParameterDeclaration newParam = new ParameterDeclaration(
        param.getModifiers(), param.getTypeAccess().compileAccess(), param.getID());
      params = params.add(newParam);
    }

    Opt<Stmt> parsed = hasParsedConstructorInvocation()
      ? new Opt(getParsedConstructorInvocation().compileStmt())
      : new Opt();

    Block newBlock = getBlock().compileBlock();

    for (Stmt stmt: newBlock.getStmtList()) {
      blockStmtList = blockStmtList.add(stmt);
    }

    return new ConstructorDecl(
      getModifiers(),
      ((ClassDecl) hostType()).compileName(),
      params,
      getExceptionList(),
      parsed,
      new Block(blockStmtList));
  }

  eq MethodDecl.compile() {
    List<ParameterDeclaration> params = new List();
    for (int i = 0; i < getNumParameter(); i++) {
      ParameterDeclaration param = getParameter(i);
      ParameterDeclaration newParam = new ParameterDeclaration(
        param.getModifiers(), param.getTypeAccess().compileAccess(), param.getID());
      params = params.add(newParam);
    }

    String name = getID();

    /*
    if (this.interfaceMethod != null) {
      MethodDecl interfaceMethod = this.interfaceMethod;
      if (interfaceMethod.needsReplacing) {
        name = interfaceMethod.name();
      }
    }
    */
    if (this.rename) {
      name = getID() + "__" + type().name();
    }

    return new MethodDecl(
      getModifiers(),
      getTypeAccess().compileAccess(),
      name,
      params,
      new List(),
      hasBlock() ? new Opt(getBlock().compileBlock()) : new Opt());
  }

  eq GenericVersionMethodDecl.compile() {
    List<ParameterDeclaration> params = new List();

    for (VersionVariable v: getVersionVariableList()) {
      TypeAccess typeAccess = v.typeAccess();
      TypeDecl type = typeAccess.compileType();
      params = params.add(new ParameterDeclaration(
        new Modifiers(),
        new TypeAccess(type.packageName(), type.name() + "_Factory"),
        v.getID()
      ));
    }

    for (ParameterDeclaration param: getParameterList()) {
      ParameterDeclaration newParam = new ParameterDeclaration(
        param.getModifiers(), param.getTypeAccess().compileAccess(), param.getID());
      params = params.add(newParam);
    }

    return new MethodDecl(
      getModifiers(),
      getTypeAccess().compileAccess(),
      getID(),
      params,
      new List(),
      hasBlock() ? new Opt(getBlock().compileBlock()) : new Opt());
  }

  eq FieldDecl.compile() {
    List<BodyDecl> result = new List();

    List<FieldDeclarator> decls = new List();
    for (FieldDeclarator decl: getDeclaratorList()) {
      decls = decls.add(decl.compileDeclarator());
    }

    return new FieldDecl(
      getModifiers(),
      getTypeAccess().compileAccess(),
      decls);
  }

  syn nta List<BodyDecl> BodyDecl.compileGetterAndSetter() = new List();

  eq FieldDecl.compileGetterAndSetter() {
    List<BodyDecl> result = new List();

    if (getModifiers().isPublic() && hostType().isVersioned()) {
      for (FieldDeclarator decl: getDeclaratorList()) {
        String getterName = "get__" + decl.getID();
        if (this.rename) {
          getterName = getterName + "__" + type().name();
        }

        List<Stmt> getStmt = new List();
        getStmt = getStmt.add(new ReturnStmt(new Dot(new ThisAccess(), new VarAccess(decl.getID()))));
        BodyDecl newGetter = new MethodDecl(
          getModifiers(),
          getTypeAccess().compileAccess(),
          getterName,
          new List(),
          new List(),
          new Opt(new Block(getStmt)));
        result = result.add(newGetter);

        ParameterDeclaration param = new ParameterDeclaration(
          new Modifiers(),
          getTypeAccess().compileAccess(),
          "toAssign");
        List<Stmt> setStmt = new List();
        setStmt = setStmt.add(new ReturnStmt(
          new AssignSimpleExpr(
            new Dot(new ThisAccess(), new VarAccess(decl.getID())),
            new VarAccess("toAssign"))));
        BodyDecl newSetter = new MethodDecl(
          getModifiers(),
          getTypeAccess().compileAccess(),
          "set__" + decl.getID(),
          new List().add(param),
          new List(),
          new Opt(new Block(setStmt)));
        result = result.add(newSetter);
      }
    }

    return result;
  }

  syn nta List<BodyDecl> BodyDecl.compileInterface() = new List();

  eq FieldDecl.compileInterface() {
    List<BodyDecl> result = new List();

    if (getModifiers().isPublic() && hostType().isVersioned()) {
      for (FieldDeclarator d: getDeclaratorList()) {
        MethodDecl newGetter = new MethodDecl(
          getModifiers(),
          getTypeAccess().compileAccess(),
          "get__" + d.getID(),
          new List(),
          new List(),
          new Opt());
        newGetter.source = this;
        result = result.add(newGetter);

        ParameterDeclaration param = new ParameterDeclaration(
          new Modifiers(),
          getTypeAccess().compileAccess(),
          "toAssign");
        MethodDecl newSetter = new MethodDecl(
          getModifiers(),
          getTypeAccess().compileAccess(),
          "set__" + d.getID(),
          new List().add(param),
          new List(),
          new Opt());
        result = result.add(newSetter);
      }
    }

    return result;
  }

  eq MethodDecl.compileInterface() {
    if (getID().equals("main")) {
      return new List();
    }

    List<ParameterDeclaration> ps = new List();

    for (ParameterDeclaration p: getParameterList()) {
      ParameterDeclaration np = new ParameterDeclaration(
        p.getModifiers(), p.getTypeAccess().compileAccess(), p.getID());
      ps = ps.add(np);
    }

    MethodDecl newMethod = new MethodDecl(
      getModifiers(),
      getTypeAccess().compileAccess(),
      getID(),
      ps,
      new List(),
      new Opt());
    newMethod.source = this;

    return new List().add(newMethod);
  }

  eq GenericVersionMethodDecl.compileInterface() {
    List<ParameterDeclaration> ps = new List();
    
    for (VersionVariable v: getVersionVariableList()) {
      TypeAccess ta = v.typeAccess();
      TypeDecl t = ta.compileType();
      ps = ps.add(new ParameterDeclaration(
        new Modifiers(),
        new TypeAccess(t.packageName(), t.name() + "_Factory"),
        v.getID()));
    }

    for (ParameterDeclaration p: getParameterList()) {
      ParameterDeclaration np = new ParameterDeclaration(
        p.getModifiers(), p.getTypeAccess().compileAccess(), p.getID());
      ps = ps.add(np);
    }

    MethodDecl newMethod = new MethodDecl(
      getModifiers(),
      getTypeAccess().compileAccess(),
      getID(),
      ps,
      new List(),
      new Opt());

    //newMethod.methodSource = this;

    return new List().add(newMethod);
  }

  syn nta ParameterDeclaration ParameterDeclaration.compileParameter()
    = new ParameterDeclaration(getModifiers(), getTypeAccess().compileAccess(), getID());

  syn nta Access Access.compileAccess() = treeCopy();

  eq Dot.compileAccess() = new Dot(getLeft().compileExpr(), getRight().compileAccess());

  eq VersionTypeAccess.compileAccess() = getTypeAccess().compileAccess();

  eq ParVersionTypeAccess.compileAccess() = getTypeAccess().compileAccess();

  eq ParVersionMethodAccess.compileAccess() {
    TypeDecl qualifierType = isQualified() ? qualifier().compileType() : hostType();
    Map<TypeDecl,Collection<MethodDecl>> methodMap = verLookupMethod(name());
    Collection<MethodDecl> methods = new ArrayList();
    for (TypeDecl keyType: methodMap.keySet()) {
      if (keyType == qualifierType) {
        methods = methodMap.get(keyType);
      }
    }

    List<Expr> argList = new List();

    if (methods.size() == 1) {
      MethodDecl m = methods.iterator().next();
      int i = 0;
      for (VersionVariable vv: m.versionVariableList()) {
        VersionArgument va = getVersionArgument(i);
        TypeAccess compileAccess = vv.typeAccess();
        if (va.isVersionNumArgument()) {
          argList = argList.add(new ClassInstanceExpr(
            new TypeAccess(compileAccess.getPackage(),
                           compileAccess.getID() + "_v" + va.getID() + "_Factory"),
            new List()
          ));
        } else if (va.isVersionVarArgument()) {
          argList = argList.add(new VarAccess(va.getID()));
        }
        i++;
      }
    }

    for (Expr expr: getArgList()) {
      argList = argList.add(expr.compileExpr());
    }

    return new MethodAccess(getID(), argList);
  }

  eq MethodAccess.compileAccess() {
    TypeDecl qualifierType = isQualified() ? qualifier().compileType() : hostType();
    Map<TypeDecl,Collection<MethodDecl>> methodMap = verLookupMethod(name());
    Collection<MethodDecl> methods = new ArrayList();
    for (TypeDecl keyType: methodMap.keySet()) {
      if (keyType == qualifierType) {
        methods = methodMap.get(keyType);
      }
    }

    String name = getID();
    for (MethodDecl method: methods) {
      // TODO: define applicable post constraint generation
      // NOTE: for the time being just reuse the one from constraint generation
      if (verApplicableAndAccessible(method, qualifierType).isPresent()) {
        if (method.rename) {
          name = method.name() + "__" + method.type().name();
        }
        break;
      }
    }

    List<Expr> argList = new List();
    for (Expr expr: getArgList()) {
      argList = argList.add(expr.compileExpr());
    }
    return new MethodAccess(name, argList);
  }

  eq VarAccess.compileAccess() {
    // TODO: rename getter for renamed fields
    if (isQualified() && !(qualifier() instanceof ThisAccess)
        && qualifier().type().isVersioned()) {
      TypeDecl qualifierType = qualifier().compileType();
      Map<TypeDecl,SimpleSet<Variable>> variableMap = verLookupVariable(name());
      SimpleSet<Variable> variables = emptySet();
      for (TypeDecl keyType: variableMap.keySet()) {
        if (keyType == qualifierType) {
          variables = variableMap.get(keyType);
        }
      }

      String name = "get__" + getID();

      for (Variable variable: variables) {
        if (variable.isField()) {
          FieldDecl field = variable.fieldDecl();
          if (field.rename) {
            name = "get__" + getID() + "__" + type().name();
          }
        }
      }
      return new MethodAccess(name, new List());
    }
    return treeCopy();
  } 

  eq SuperConstructorAccess.compileAccess() {
    List<Expr> varList = new List();
    for (Expr expr: getArgList()) {
      varList = varList.add(expr.compileExpr());
    }
    return new SuperConstructorAccess(getID(), varList);
  }

  syn nta Block Block.compileBlock() {
    List<Stmt> stmtList = new List();
    for (Stmt stmt: getStmtList()) {
      stmtList = stmtList.add(stmt.compileStmt());
    }
    return new Block(stmtList);
  }

  syn Access Access.compileInstanceAccess() = treeCopy();

  eq TypeAccess.compileInstanceAccess() {
    TypeDecl type = getSolution();
    if (type.isVersioned()) {
      return new TypeAccess(getPackage(), type.getID() + "_v" + type.version());
    }
    return treeCopy();
  }

  eq VersionTypeAccess.compileInstanceAccess() {
    VersionArgument va = getVersionArgument();
    assert va.isVersionNumArgument();
    
    TypeDecl type = getSolution();
    return new TypeAccess(((TypeAccess) getTypeAccess()).getPackage(), type.getID() + "_v" + type.version());
  }

  eq ParVersionTypeAccess.compileInstanceAccess() = getTypeAccess().compileAccess();

  syn nta Stmt Stmt.compileStmt() = treeCopy();

  eq VarDeclStmt.compileStmt() {
    List<VariableDeclarator> decls = new List();
    for (VariableDeclarator decl: getDeclaratorList()) {
      decls = decls.add(decl.compileDeclarator());
    }
    return new VarDeclStmt(
      getModifiers(),
      getTypeAccess().compileAccess(),
      decls);
  }

  eq ReturnStmt.compileStmt() = hasResult() ? new ReturnStmt(getResult().compileExpr()) : new ReturnStmt(new Opt());

  eq ExprStmt.compileStmt() = new ExprStmt(getExpr().compileExpr());

  eq IfStmt.compileStmt()
    = new IfStmt(getCondition().compileExpr(), getThen().compileStmt(),
        hasElse() ? new Opt(getElse().compileStmt()) : new Opt());

  eq ForStmt.compileStmt() {
    List<Stmt> initList = new List();
    for (Stmt s: getInitStmtList()) {
      initList = initList.add(s.compileStmt());
    }

    Opt<Expr> cnd = hasCondition() ? new Opt(getCondition().compileExpr()) : new Opt();

    List<Stmt> updateList = new List();
    for (Stmt s: getUpdateStmtList()) {
      updateList = updateList.add(s.compileStmt());
    }

    return new ForStmt(initList, cnd, updateList, getStmt().compileStmt());
  }

  eq Block.compileStmt() = compileBlock();

  syn nta VariableDeclarator VariableDeclarator.compileDeclarator()
    = new VariableDeclarator(getID(), getDimsList(), hasInit() ? new Opt(getInit().compileExpr()) : new Opt());

  syn nta FieldDeclarator FieldDeclarator.compileDeclarator()
    = new FieldDeclarator(getID(), getDimsList(), hasInit() ? new Opt(getInit().compileExpr()) : new Opt());

  syn nta Expr Expr.compileExpr() = treeCopy();

  eq Access.compileExpr() = compileAccess();

  eq ClassInstanceExpr.compileExpr() {
    Access toCompile = getAccess();
    List<Expr> argList = new List();

    if (toCompile.isParVersionTypeAccess()) {
      TypeDecl compileType = program().typeMap
        .get(new Integer(model().evaluate(getAccess().solverConst, false).toString()));
      assert compileType.isGenericVersionClassDecl();
      GenericVersionClassDecl compileClass = (GenericVersionClassDecl) compileType;

      ParVersionTypeAccess typeAccess = (ParVersionTypeAccess) toCompile;

      for (int i = 0; i < typeAccess.getNumVersionArgument(); i++) {
        VersionArgument va = typeAccess.getVersionArgument(i);
        VersionVariable vv = compileClass.getVersionVariable(i);
        TypeAccess compileAccess = vv.typeAccess();
        if (va.isVersionNumArgument()) {
          argList = argList.add(new ClassInstanceExpr(
            new TypeAccess(compileAccess.getPackage(), compileAccess.getID() + "_v" + va.getID() + "_Factory"),
            new List()));
        } else {
          argList = argList.add(new VarAccess(va.getID()));
        }
      }

      toCompile = typeAccess.getTypeAccess();
    }

    for (Expr arg: getArgList()) {
      argList = argList.add(arg.compileExpr());
    }

    if (toCompile.isVersionTypeAccess()) {
      VersionTypeAccess typeAccess = (VersionTypeAccess) toCompile;
      VersionArgument va = typeAccess.getVersionArgument();
      if (va.isVersionVarArgument()) {
        return new Dot(new VarAccess(va.getID()), new MethodAccess("make", argList));
      }
    }

    Access access = toCompile.compileInstanceAccess();

    return new ClassInstanceExpr(access, argList); 
  }

  eq AssignSimpleExpr.compileExpr() {
    if (getDest() instanceof Dot) {
      Dot dest = (Dot) getDest();
      if (!(dest.getLeft() instanceof ThisAccess)
          && dest.getLeft().type().isVersioned()
          && dest.getRight() instanceof VarAccess) {
        VarAccess var = (VarAccess) dest.getRight();
        return new Dot(dest.getLeft(),
          new MethodAccess("set__" + var.getID(), new List().add(getSource().compileExpr())));
      }
    }
    return new AssignSimpleExpr(getDest().compileExpr(), getSource().compileExpr());
  }
  
  syn String TypeDecl.compileName() = name();

  eq VersionClassDecl.compileName() = getID() + "_v" + version();

  public TypeDecl Expr.compileType() {
    return program().typeMap.get(new Integer(model().evaluate(solverConst, false).toString()));
  }

  syn nta List<BodyDecl> BodyDecl.compileFactory() = new List();

  eq ConstructorDecl.compileFactory() {
    List<ParameterDeclaration> params = new List();
    List<Expr> argList = new List();

    if (hostType().isGenericVersionClassDecl()) {
      GenericVersionClassDecl host = (GenericVersionClassDecl) hostType();
      for (int i = 0; i < host.getNumVersionVariable(); i++) {
        VersionVariable v_i = host.getVersionVariable(i);
        TypeAccess typeAccess_i = v_i.typeAccess();
        TypeDecl type_i = typeAccess_i.compileType();
        params = params.add(new ParameterDeclaration(
          new Modifiers(),
          new TypeAccess(type_i.packageName(), type_i.name() + "_Factory"),
          v_i.getID()
        ));
        argList = argList.add(new VarAccess(v_i.getID()));
      }
    }

    for (ParameterDeclaration param: getParameterList()) {
      ParameterDeclaration newParam = new ParameterDeclaration(
        param.getModifiers(), param.getTypeAccess().compileAccess(), param.getID());
      params = params.add(newParam);
      argList = argList.add(new VarAccess(param.getID()));
    }
    
    List<Stmt> stmtList = new List().add(new ReturnStmt(
      new Opt(new ClassInstanceExpr(
        new TypeAccess(hostType().packageName(), hostType().compileName()),
        argList,
        new Opt()
      ))
    ));

    return new List().add(new MethodDecl(
      new Modifiers(new List().add(new Modifier("public"))),
      new TypeAccess(hostType().packageName(), hostType().name()),
      "make",
      params,
      new List(),
      new Opt(new Block(stmtList))
    ));
  }

  syn nta List<BodyDecl> BodyDecl.compileInterfaceFactory() = new List();

  eq ConstructorDecl.compileInterfaceFactory() {
    List<ParameterDeclaration> params = new List();

    if (hostType().isGenericVersionClassDecl()) {
      GenericVersionClassDecl host = (GenericVersionClassDecl) hostType();
      for (int i = 0; i < host.getNumVersionVariable(); i++) {
        VersionVariable v_i = host.getVersionVariable(i);
        TypeAccess typeAccess_i = v_i.typeAccess();
        TypeDecl type_i = typeAccess_i.compileType();
        params = params.add(new ParameterDeclaration(
          new Modifiers(),
          new TypeAccess(type_i.packageName(), type_i.name() + "_Factory"),
          v_i.getID()
        ));
      }
    }

    for (ParameterDeclaration param: getParameterList()) {
      ParameterDeclaration newParam = new ParameterDeclaration(
        param.getModifiers(), param.getTypeAccess().compileAccess(), param.getID());
      params = params.add(newParam);
    }

    return new List().add(new MethodDecl(
      new Modifiers(new List().add(new Modifier("public"))),
      new TypeAccess(hostType().packageName(), hostType().name()),
      "make",
      params,
      new List(),
      new Opt())
    );
  }

  syn nta BodyDecl BodyDecl.addReturnStmt() = treeCopy();

  eq MethodDecl.addReturnStmt() {
    List<ParameterDeclaration> ps = new List();

    for (ParameterDeclaration p: getParameterList()) {
      ps = ps.add(p.treeCopy());
    }

    Stmt returnStmt;

    if (type().isVoid()) {
      returnStmt = new ReturnStmt();
    } else if (type().isNumericType()) {
      returnStmt = new ReturnStmt(new IntegerLiteral("0"));
    } else if (type().isBoolean()) {
      returnStmt = new ReturnStmt(new BooleanLiteral("false"));
    } else if (type().isChar()) {
      returnStmt = new ReturnStmt(new CharacterLiteral(""));
    } else {
      returnStmt = new ReturnStmt(new NullLiteral("null"));
    }

    return new MethodDecl(
      getModifiers(),
      getTypeAccess().treeCopy(),
      getID(),
      ps,
      new List(),
      new Opt(new Block(new List().add(returnStmt))));
  }
}