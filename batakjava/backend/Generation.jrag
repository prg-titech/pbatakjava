aspect Generation {

  public java.util.List<String> Program.newTypes = new ArrayList();

  syn nta CompilationUnit CompilationUnit.compile() {
    List<TypeDecl> types = new List();
    for (TypeDecl type: getTypeDeclList()) {
      for (TypeDecl newType: type.compile()) {
        String newTypeName = packageName() + "." + newType.name();
        if (!program().newTypes.contains(newTypeName)) {
          program().newTypes.add(newTypeName);
          types = types.add(newType);
        }
      }
    }

    CompilationUnit unit = new CompilationUnit(getPackageDecl(), new List(), types);
    unit.setFromSource(true);
    unit.setClassSource(getClassSource());

    return unit;
  }

  syn nta List<TypeDecl> TypeDecl.compile() = new List().add(treeCopy());

  eq VersionClassDecl.compile() {
    List<TypeDecl> types = new List();

    types = types.addAll(compileInterface());
    types = types.addAll(compileClass());

    return types;
  }

  syn nta List<TypeDecl> VersionClassDecl.compileInterface() {
    List<TypeDecl> types = new List();

    // build interface for class
    TypeDecl classInterface = new InterfaceDecl(
      new Modifiers(new List().add(new Modifier("public"))),
      getID(),
      new List(),
      new List()
    );
    types = types.add(classInterface);
    
    // build interface for factory
    TypeDecl factoryInterface = new InterfaceDecl(
      new Modifiers(new List().add(new Modifier("public"))),
      getID() + "_Factory",
      new List(),
      new List()
    );
    types = types.add(factoryInterface);

    return types;
  }

  syn nta List<TypeDecl> VersionClassDecl.compileClass() {
    List<TypeDecl> types = new List();

    TypeDecl classClass = new ClassDecl(
      getModifiers(),
      getID() + "_v" + version(), 
      new Opt(),
      new List().add(new TypeAccess(packageName(), getID())),
      new List()
    );
    types = types.add(classClass);

    TypeDecl factoryClass = new ClassDecl(
      new Modifiers(new List().add(new Modifier("public"))),
      getID() + "_v" + version() + "_Factory",
      new Opt(),
      new List().add(new TypeAccess(packageName(), getID() + "_Factory")),
      new List()
    );
    types = types.add(factoryClass);

    return types;
  }

}