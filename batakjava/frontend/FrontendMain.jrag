aspect FrontendMain {

  abstract public class BatakjavaFrontend extends Frontend {

    protected BatakjavaFrontend(String name, String version) {
      super(name, version);
    }

    @Override
    public int run(String[] args, BytecodeReader reader, JavaParser parser) {

      program.resetStatistics();
      program.initBytecodeReader(reader);
      program.initJavaParser(parser);

      initOptions();
      int argResult = processArgs(args);
      if (argResult != 0) {
        return argResult;
      }

      Collection<String> files = program.options().files();

      if (program.options().hasOption("-help") || files.isEmpty()) {
        printUsage();
        return EXIT_SUCCESS;
      }

      Collection<CompilationUnit> work = new LinkedList<CompilationUnit>();

      try {
        for (String file : files) {
          program.addSourceFile(file);
        }

        TypeDecl object = program.lookupType("java.lang", "Object");
        if (object.isUnknown()) {
          // If we try to continue without java.lang.Object, we'll just get a stack overflow
          // in member lookups because the unknown (Object) type would be treated as circular.
          System.err.println("Error: java.lang.Object is missing."
              + " The Java standard library was not found.");
          return EXIT_UNHANDLED_ERROR;
        }

        SimpleSet<TypeDecl> objectSet = program.lookupTypeSet("java.lang", "Object");
        if (!objectSet.isSingleton()) {
          System.err.println("Error: java.lang.Object is missing."
              + " The Java standard library was not found.");
          return EXIT_UNHANDLED_ERROR;
        }

        int compileResult = EXIT_SUCCESS;

        Iterator<CompilationUnit> iter = program.compilationUnitIterator();
        while (iter.hasNext()) {
          CompilationUnit unit = iter.next();
          int result = processBatakCompilationUnit(unit);
          switch (result) {
            case EXIT_SUCCESS:
              break;
            case EXIT_UNHANDLED_ERROR:
              return result;
            default:
              compileResult = result;
          }
        }

        if (compileResult != EXIT_SUCCESS) {
          return compileResult;
        }

        if (program.solve() != EXIT_SUCCESS) {
          // TODO: Make this better
          System.err.println("Solution not found.");
          return EXIT_UNHANDLED_ERROR;
        }

      } catch (AbstractClassfileParser.ClassfileFormatError e) {
        System.err.println(e.getMessage());
        return EXIT_UNHANDLED_ERROR;
      } catch (Throwable t) {
        System.err.println("Fatal exception:");
        t.printStackTrace(System.err);
        return EXIT_UNHANDLED_ERROR;
      } finally {
        if (program.options().hasOption("-profile")) {
          program.printStatistics(System.out);
        }
      }
      return EXIT_SUCCESS;
    }

    protected int processBatakCompilationUnit(CompilationUnit unit) throws Error {
      if (unit != null && unit.fromSource()) {
        try {
          // only handle parse errors
          Collection<Problem> errors = unit.parseErrors();
          if (!errors.isEmpty()) {
            processErrors(errors, unit);
            return 1;
          }
        } catch (Error e) {
          System.err.println("Encountered error while processing " + unit.pathName());
          throw e;
        }
      }
      return 0;
    }

    protected void printUsage() {
      System.out.println(name() + " " + version());
      System.out.println("\n"
          + "Usage: java " + name() + " <options> <source files>\n"
          + "  -help                     Print a synopsis of standard options\n");
    }

  }

  public long Program.javaGenTime;

  abstract public class BatakjavaBackend extends BatakjavaFrontend {

    protected Program generated;

    protected BatakjavaBackend(String name, String version) {
      super(name, version);
    }

    @Override
    public int run(String[] args, BytecodeReader reader, JavaParser parser) {

      program.resetStatistics();
      program.initBytecodeReader(reader);
      program.initJavaParser(parser);

      initOptions();
      int argResult = processArgs(args);
      if (argResult != 0) {
        return argResult;
      }

      Collection<String> files = program.options().files();

      if (program.options().hasOption("-version")) {
        printVersion();
        return EXIT_SUCCESS;
      }

      if (program.options().hasOption("-help") || files.isEmpty()) {
        printUsage();
        return EXIT_SUCCESS;
      }
      
      Collection<CompilationUnit> work = new LinkedList<CompilationUnit>();
      
      try {
        for (String file: files) {
          program.addSourceFile(file);
        }

        TypeDecl object = program.lookupType("java.lang", "Object");
        if (object.isUnknown()) {
          System.err.println("Error: java.lang.Object is missing."
              + " The Java standard library was not found.");
          return EXIT_UNHANDLED_ERROR;
        }

        SimpleSet<TypeDecl> objectSet = program.lookupTypeSet("java.lang", "Object");
        if (!objectSet.isSingleton()) {
          System.err.println("Error: java.lang.Object is missing."
              + " The Java standard library was not found.");
          return EXIT_UNHANDLED_ERROR;
        }

        int compileResult = EXIT_SUCCESS;

        for (CompilationUnit unit: program.getCompilationUnitList()) {
          int result = processBatakCompilationUnit(unit);
          switch (result) {
            case EXIT_SUCCESS:
              break;
            case EXIT_UNHANDLED_ERROR:
              return result;
            default:
              compileResult = result;
          }
        }

        Iterator<CompilationUnit> libraryIterator = program.libraryCompilationUnitIterator();
        while (libraryIterator.hasNext()) {
          CompilationUnit unit = libraryIterator.next();
          int result = processCompilationUnit(unit);
          switch (result) {
            case EXIT_SUCCESS:
              break;
            case EXIT_UNHANDLED_ERROR:
              return result;
            default:
              compileResult = result;
          }
        }        

        if (compileResult != EXIT_SUCCESS) {
          return compileResult;
        }
        
        if (program.solve() != EXIT_SUCCESS) {
          System.err.println("Solution not found.");
          return EXIT_UNHANDLED_ERROR;
        }

        long startGen = System.nanoTime();

        generated = program.compile();

        program.javaGenTime += System.nanoTime() - startGen;

        Options genOptions = generated.options();
        genOptions.addKeyValueOption("-d");
        genOptions.addOptions(args);

        object = generated.lookupType("java.lang", "Object");
        if (object.isUnknown()) {
          return EXIT_UNHANDLED_ERROR;
        }

        Collection<CompilationUnit> newWork = new LinkedList<CompilationUnit>();

        for (CompilationUnit newUnit: generated.getCompilationUnitList()) {
          System.out.println(newUnit.prettyPrint());
          newWork.add(newUnit);
          int result = processCompilationUnit(newUnit);
          switch (result) {
            case EXIT_SUCCESS:
              break;
            case EXIT_UNHANDLED_ERROR:
              return result;
            default:
              compileResult = result;
          }
        }

        for (CompilationUnit newUnit: newWork) {
          if (newUnit != null && newUnit.fromSource()) {
            long start = System.nanoTime();
            processNoErrors(newUnit);
            program.codeGenTime += System.nanoTime() - start;
          }
        }

      } catch (Throwable t) {
        System.err.println("Fatal exception:");
        t.printStackTrace(System.err);
        return EXIT_UNHANDLED_ERROR;
      } finally {
        if (program.options().hasOption("-profile")) {
          program.printStatistics(System.out);
        }
      }
      
      return EXIT_SUCCESS;

    }
  }

  abstract public class DependencyFrontend extends Frontend {

    protected DependencyFrontend(String name, String version) {
      super(name, version);
    }

    @Override
    public int run(String[] args, BytecodeReader reader, JavaParser parser) {

      program.resetStatistics();
      program.initBytecodeReader(reader);
      program.initJavaParser(parser);

      initOptions();
      int argResult = processArgs(args);
      if (argResult != 0) {
        return argResult;
      }

      Collection<String> files = program.options().files();

      if (program.options().hasOption("-help") || files.isEmpty()) {
        printUsage();
        return EXIT_SUCCESS;
      }

      Collection<CompilationUnit> work = new LinkedList<CompilationUnit>();

      try {
        for (String file : files) {
          program.addSourceFile(file);
        }

        TypeDecl object = program.lookupType("java.lang", "Object");
        if (object.isUnknown()) {
          // If we try to continue without java.lang.Object, we'll just get a stack overflow
          // in member lookups because the unknown (Object) type would be treated as circular.
          System.err.println("Error: java.lang.Object is missing."
              + " The Java standard library was not found.");
          return EXIT_UNHANDLED_ERROR;
        }

        SimpleSet<TypeDecl> objectSet = program.lookupTypeSet("java.lang", "Object");
        if (!objectSet.isSingleton()) {
          System.err.println("Error: java.lang.Object is missing."
              + " The Java standard library was not found.");
          return EXIT_UNHANDLED_ERROR;
        }

        int compileResult = EXIT_SUCCESS;

        Iterator<CompilationUnit> iter = program.compilationUnitIterator();
        while (iter.hasNext()) {
          CompilationUnit unit = iter.next();
          int result = processCompilationUnit(unit);
          switch (result) {
            case EXIT_SUCCESS:
              break;
            case EXIT_UNHANDLED_ERROR:
              return result;
            default:
              compileResult = result;
          }
        }

        program.initializeGraph();

      } catch (AbstractClassfileParser.ClassfileFormatError e) {
        System.err.println(e.getMessage());
        return EXIT_UNHANDLED_ERROR;
      } catch (Throwable t) {
        System.err.println("Fatal exception:");
        t.printStackTrace(System.err);
        return EXIT_UNHANDLED_ERROR;
      }
      return EXIT_SUCCESS;
    }

    protected void printUsage() {
      System.out.println("For debug use");
    }

  }

}