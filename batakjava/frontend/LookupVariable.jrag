aspect VersionVariableScope {  

  // TODO: different version of superclass
  inh Map<TypeDecl,SimpleSet<Variable>> Expr.verLookupVariable(String name);

  eq Program.getChild().verLookupVariable(String name) = new HashMap();

  eq Dot.getRight().verLookupVariable(String name) {
    Map<TypeDecl,SimpleSet<Variable>> map = new HashMap();
    for (TypeDecl type: getLeft().typeSet()) {
      if (type.accessibleFrom(hostType())) {
        map.put(type, keepAccessibleFields(type.memberFields(name)));
      }
    }
    return map;
  }

  syn TypeAccess Access.takeTypeAccess() = null;

  eq TypeAccess.takeTypeAccess() = this;

  eq VersionTypeAccess.takeTypeAccess() = (TypeAccess) getTypeAccess().takeTypeAccess();

  eq ParVersionTypeAccess.takeTypeAccess() = (TypeAccess) getTypeAccess().takeTypeAccess();

  // TODO: allow a version variable to be assoicated with multiple types
  syn TypeAccess VersionVariable.typeAccess() {
    SimpleSet<TypeAccess> accessSet = emptySet();
    java.util.Set<String> nameSet = new HashSet();
    for (Access access: boundSet()) {
      TypeAccess typeAccess = access.takeTypeAccess();
      assert typeAccess != null;
      String name = typeAccess.getPackage() + "." + typeAccess.getID();
      if (!nameSet.contains(name)) {
        accessSet = accessSet.add(typeAccess);
        nameSet.add(name);
      }
    }
    if (accessSet.isSingleton()) {
      return accessSet.singletonValue();
    }
    if (accessSet.isEmpty()) {
      throw new Error("Version variable " + getID() +" is not associated with anything.");
    }
    throw new Error("Version variable " + getID() +" can only be associated with a single class (for now).");
  }

  inh SimpleSet<Access> VersionVariable.boundSet();

  eq Program.getChild().boundSet() = emptySet();

  eq GenericVersionClassDecl.getVersionVariable(int i).boundSet()
    = boundSet(getVersionVariable(i), this.<TypeDecl>emptySet().add(this));

  eq GenericVersionMethodDecl.getVersionVariable(int i).boundSet() 
    = boundSet(getVersionVariable(i), this.<TypeDecl>emptySet());

  syn SimpleSet<Access> TypeDecl.boundSet(VersionVariable v, SimpleSet<TypeDecl> visited)
    = this.<Access>emptySet();

  eq GenericVersionClassDecl.boundSet(VersionVariable v, SimpleSet<TypeDecl> visited) {
    SimpleSet<Access> result = emptySet();
    for (BodyDecl b: getBodyDeclList()) {
      for (Access bodyAccess: b.boundSet(v, visited)) {
        result = result.add(bodyAccess);
      }
    }
    return result;
  }

  syn SimpleSet<Access> BodyDecl.boundSet(VersionVariable v, SimpleSet<TypeDecl> visited) 
    = this.<Access>emptySet();

  eq FieldDecl.boundSet(VersionVariable v, SimpleSet<TypeDecl> visited) 
    = getTypeAccess().boundSet(v, visited);

  eq ConstructorDecl.boundSet(VersionVariable v, SimpleSet<TypeDecl> visited) {
    SimpleSet<Access> set = emptySet();
    for (ParameterDeclaration param: getParameterList()) {
      for (Access a: param.getTypeAccess().accessBoundSet(v, visited)) {
        set = set.add(a); 
      }
    }

    // LATER: constructor body

    return set;
  }

  eq MethodDecl.boundSet(VersionVariable v, SimpleSet<TypeDecl> visited) {
    SimpleSet<Access> set = emptySet();
    for (ParameterDeclaration param: getParameterList()) {
      for (Access a: param.getTypeAccess().accessBoundSet(v, visited)) {
        set = set.add(a);
      }
    }

    for (Access a: getTypeAccess().accessBoundSet(v, visited)) {
      set = set.add(a);
    }

    // LATER: method body
    if (hasBlock()) {
      for (Access a: getBlock().blockBoundSet(v, visited)) {
        set = set.add(a);
      }
    }

    return set;
  }

  syn SimpleSet<Access> Access.accessBoundSet(VersionVariable v, SimpleSet<TypeDecl> visited)
    = boundSet(v, visited);

  syn SimpleSet<Access> Block.blockBoundSet(VersionVariable v, SimpleSet<TypeDecl> visited) {
    SimpleSet<Access> set = emptySet();
    for (Stmt stmt: getStmtList()) {
      for (Access a: stmt.boundSet(v, visited)) {
        set = set.add(a);
      }
    }
    return set;
  }

  syn SimpleSet<Access> Expr.boundSet(VersionVariable v, SimpleSet<TypeDecl> visited)
    = this.<Access>emptySet();

  eq AssignExpr.boundSet(VersionVariable v, SimpleSet<TypeDecl> visited) {
    SimpleSet<Access> set = emptySet();
    for (Access a: getDest().boundSet(v, visited)) {
      set = set.add(a);
    }
    for (Access a: getSource().boundSet(v, visited)) {
      set = set.add(a);
    }
    return set;
  }

  eq ClassInstanceExpr.boundSet(VersionVariable v, SimpleSet<TypeDecl> visited) {
    SimpleSet<Access> set = emptySet();
    for (Access a: getAccess().accessBoundSet(v, visited)) {
      set = set.add(a);
    }
    for (Expr arg: getArgList()) {
      for (Access a: arg.boundSet(v, visited)) {
        set = set.add(a);
      }
    }
    return set;
  }

  eq Access.boundSet(VersionVariable v, SimpleSet<TypeDecl> visited)
    = this.<Access>emptySet();

  eq VersionTypeAccess.boundSet(VersionVariable v, SimpleSet<TypeDecl> visited)
    = getVersionArgument().isBound(v) ? this.<Access>emptySet().add(this) : emptySet();

  eq ParVersionTypeAccess.boundSet(VersionVariable v, SimpleSet<TypeDecl> visited) {
    SimpleSet<Access> set = emptySet();
    for (int i = 0; i < getNumVersionArgument(); i++) {
      if (getVersionArgument(i).isBound(v)) {
        for (TypeDecl type: typeSet()) {
          if (visited.contains(type)) {
            continue;
          }
          GenericVersionClassDecl cls = (GenericVersionClassDecl) type;
          for (Access a: type.boundSet(cls.getVersionVariable(i), visited.add(type))) {
            set = set.add(a);
          }
        }
      }
    }
    return set;
  }

  syn SimpleSet<Access> Stmt.boundSet(VersionVariable v, SimpleSet<TypeDecl> visited) = this.<Access>emptySet();

  eq Block.boundSet(VersionVariable v, SimpleSet<TypeDecl> visited) = blockBoundSet(v, visited);

  eq ExprStmt.boundSet(VersionVariable v, SimpleSet<TypeDecl> visited) = getExpr().boundSet(v, visited);

  syn boolean VersionArgument.isBound(VersionVariable v) = false;

  eq VersionVarArgument.isBound(VersionVariable v) = getID().equals(v.getID());

  inh SimpleSet<VersionVariable> VersionVarArgument.lookupVersionVariable(String name);
  
  inh SimpleSet<VersionVariable> GenericVersionMethodDecl.lookupVersionVariable(String name);

  eq Program.getChild().lookupVersionVariable(String name) = emptySet();

  eq GenericVersionClassDecl.getBodyDecl(int i).lookupVersionVariable(String name) {
    SimpleSet<VersionVariable> list = emptySet();
    for (VersionVariable verVar: getVersionVariableList()) {
      if (verVar.getID().equals(name)) {
        list = list.add(verVar);
      }
    }
    return list;
  }

  eq GenericVersionMethodDecl.getBlock().lookupVersionVariable(String name) {
    SimpleSet<VersionVariable> list = emptySet();
    for (VersionVariable verVar: getVersionVariableList()) {
      if (verVar.getID().equals(name)) {
        list.add(verVar);
      }
    }
    if (!list.isEmpty()) {
      return list;
    }
    return lookupVersionVariable(name);
  }

}