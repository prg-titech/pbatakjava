aspect InnerClassesBatak {

  public boolean TypeDecl.owns(BodyDecl decl) { 
    return decl.owned(this);
  }

  public boolean BodyDecl.owned(TypeDecl type) {
    return false;
  }

  public boolean MethodDecl.owned(TypeDecl type) {
    return type.nonAttributeHasMethod(this);
  }

  public boolean TypeDecl.nonAttributeHasMethod(MethodDecl decl) {
    for (BodyDecl b: getBodyDeclList()) {
      if (b instanceof MethodDecl) {
        MethodDecl m = (MethodDecl) b;
        if (m.nonAttributeSignature().equals(decl.nonAttributeSignature())) {
          return true;
        }
      }
    }
    return false;
  }

  public String MethodDecl.nonAttributeSignature() {
    StringBuilder sb = new StringBuilder();
    sb.append(name() + "(");
    for (int i = 0; i < getNumParameter(); i++) {
      if (i != 0) {
        sb.append(", ");
      }
      sb.append(getParameter(i).type().typeName());
    }
    sb.append(")");
    return sb.toString();
  }

}