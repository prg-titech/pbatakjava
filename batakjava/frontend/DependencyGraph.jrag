aspect DependencyGraph {

  public class Node {

    private int id = -1;
    private int index = -1;
    private int lowlink = -1;
    private boolean onStack = false;

    public Node(int i) { id = i; }

    public int getId() { return id; }
    public int getIndex() { return index; }
    public int getLowlink() { return lowlink; }
    public boolean getOnStack() { return onStack; }

    public void setIndex(int i) { index = i; }
    public void setLowlink(int l) { lowlink = l; }
    public void setOnStack(boolean b) { onStack = b; }

  }

  public class Graph {
    
    public java.util.List<Node> vertices;
    public java.util.List<java.util.List<Boolean>> adjacencyMatrix;

    public Graph(int typeNum) {
      vertices = new ArrayList<Node>(typeNum);
      adjacencyMatrix = new ArrayList<java.util.List<Boolean>>(typeNum);
      for (int i=0; i<typeNum; i++) {
        vertices.add(new Node(i));
        java.util.List<Boolean> row = new ArrayList<Boolean>(typeNum);
        for (int j=0; j<typeNum; j++) {
          row.add(false);
        }
        adjacencyMatrix.add(row);  
      }
    }

    public void addEdge(int src, int dest) {
      adjacencyMatrix.get(src).set(dest, true);
    }

    public java.util.Set<Integer> getEdges(int index) {
      java.util.List<Boolean> row = adjacencyMatrix.get(index);
      java.util.Set<Integer> edges = new HashSet();
      for (int i=0; i<row.size(); i++) {
        if (row.get(i)) {
          edges.add(i);
        }
      }
      return edges;
    }

    public void printGraph() {
      for (java.util.List<Boolean> row: adjacencyMatrix) {
        System.out.println(row);
      }
    }

    private class Components {

      public java.util.List<java.util.Set<Integer>> components;
      private int index;
      private java.util.Stack<Node> stack;

      public void compute() {
        components = new ArrayList();
        index = 0;
        stack = new java.util.Stack<Node>();
        for (Node n: vertices) {
          if (n.getIndex() == -1) {
            connect(n);
          }
        }
      }

      public void connect(Node n) {
        n.setIndex(index);
        n.setLowlink(index);
        index += 1;
        stack.push(n);
        n.setOnStack(true);
        for (Integer edge: getEdges(n.getId())) {
          Node o = vertices.get(edge);
          if (o.getIndex() == -1) {
            connect(o);
            int newLowlink = n.getLowlink() < o.getLowlink() 
                              ? n.getLowlink() 
                              : o.getLowlink();
            n.setLowlink(newLowlink);
          } else if (o.getOnStack()) {
            int newLowlink = n.getLowlink() < o.getIndex() 
                              ? n.getLowlink() 
                              : o.getIndex();
            n.setLowlink(newLowlink);
          }
        }
        if (n.getLowlink() == n.getIndex()) {
          java.util.Set<Integer> component = new HashSet();
          Node o;
          do {
            o = stack.pop();
            o.setOnStack(false);
            component.add(o.getId());
          } while (n.getIndex() != o.getIndex());
          components.add(component);
        }
      }
      
    }

    public java.util.List<java.util.Set<Integer>> getComponents() {
      Components c = new Components();
      if (c.components == null) {
        c.compute();
      }
      return c.components;
    }    

  }

  public Graph Program.dependencyGraph;

  public void Program.addEdge(TypeDecl src, TypeDecl dst) {
    dependencyGraph.addEdge(src.typeNum(), dst.typeNum());
  }

  public void Program.initializeGraph() {
    callInitializeGraph();
    dependencyGraph = new Graph(typeCount);
  }

  coll LinkedList<Object> Program.callInitializeGraph() root Program;

  TypeDecl contributes each initializeGraph() to Program.callInitializeGraph();

  syn Collection<Object> TypeDecl.initializeGraph() {
    typeNum();
    return Collections.emptyList();
  }

  coll LinkedList<Object> Program.setGraphEdges() root Program;

  TypeAccess contributes each setGraphEdges() to Program.setGraphEdges();

  syn Collection<Object> TypeAccess.setGraphEdges() {
    for (TypeDecl type: typeSet()) {
      if (type.isVersioned()) {
        program().addEdge(hostType(), type);
      }
    }
    return Collections.emptyList();
  }

}