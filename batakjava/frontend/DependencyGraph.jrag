aspect DependencyGraph {

  public class Node {

    private int index = -1;
    private int lowlink = -1;
    private boolean onStack = false;

    public int getIndex() { return index; }
    public int getLowlink() { return lowlink; }
    public boolean getOnStack() { return false; }

    public void setIndex(int i) { index = i; }
    public void setLowlink(int l) { lowlink = l; }
    public void setOnStack(boolean b) { onStack = b; }

  }

  public class Graph {
    
    private java.util.List<Node> vertices;
    private java.util.List<java.util.List<Boolean>> adjacencyMatrix;

    public Graph(int typeNum) {
      vertices = new ArrayList<Node>(typeNum);
      adjacencyMatrix = new ArrayList<java.util.List<Boolean>>(typeNum);
      for (int i=0; i<typeNum; i++) {
        vertices.add(new Node());
        java.util.List<Boolean> row = new ArrayList<Boolean>(typeNum);
        for (int j=0; j<typeNum; j++) {
          row.add(false);
        }
        adjacencyMatrix.add(row);  
      }
    }

    public void addEdge(int src, int dest) {
      adjacencyMatrix.get(src).set(dest, true);
    }

    public java.util.Set<Integer> getEdges(int index) {
      java.util.List<Boolean> row = adjacencyMatrix.get(index);
      java.util.Set<Integer> edges = new HashSet();
      for (int i=0; i<row.size(); i++) {
        if (row.get(i)) {
          edges.add(i);
        }
      }
      return edges;
    }

    public void printGraph() {
      for (java.util.List<Boolean> row: adjacencyMatrix) {
        System.out.println(row);
      }
    }

    public java.util.List<java.util.Set<Integer>> components;
    private int index = 0;
    private java.util.Stack<Node> stack = new java.util.Stack<Node>();

    public void computeComponents() {
      for (Node n: vertices) {
        strongConnect(n);
      }
    }

    public void strongConnect(Node n) {
      n.setIndex(index);
      n.setLowlink(index);
      index++;
      stack.push(n);
      n.setOnStack(true);
      for (Integer edge: getEdges(n.getIndex())) {
        Node o = vertices.get(edge);
        if (o.getIndex() == -1) {
          strongConnect(o);
          int newLowlink = n.getLowlink() < o.getLowlink() 
                            ? n.getLowlink() 
                            : o.getLowlink();
          n.setLowlink(newLowlink);
        } else if (o.getOnStack()) {
          int newLowlink = n.getLowlink() < o.getIndex() 
                            ? n.getLowlink() 
                            : o.getIndex();
          n.setLowlink(newLowlink);
        }
      }
      if (n.getLowlink() == n.getIndex()) {
        java.util.Set<Integer> component = new HashSet();
        for (Node o: stack) {
          o.setOnStack(false);
          component.add(o.getIndex());
          if (n.getIndex() == o.getIndex()) {
            break;
          }
        }
        components.add(component);
      }
    }

  }

}