aspect LookupMethod {

  // TODO: different version of superclass
  inh Map<TypeDecl,Collection<MethodDecl>> Expr.verLookupMethod(String name);

  eq Program.getChild().verLookupMethod(String name) = new HashMap();
  
  eq Dot.getRight().verLookupMethod(String name) {
    Map<TypeDecl,Collection<MethodDecl>> map = new HashMap();
    for (TypeDecl type: getLeft().typeSet()) {
      map.put(type, type.memberMethods(name));
    }
    return map;
  }

}

aspect MethodDecl {

  syn boolean BodyDecl.isMethodDecl() = false;

  eq MethodDecl.isMethodDecl() = true;

  syn Optional<Formula> MethodAccess.verApplicableAndAccessible(MethodDecl m, TypeDecl t) {
    if (m.getNumParameter() != getNumArg()) {
      return Optional.empty();
    }

    if (!accessible(m)) {
      return Optional.empty();
    }

    Formula f = new Formula();
    Map<String,VersionArgument> qualifierVerMap = qualifier().verMap(t);

    for (int i = 0; i < m.getNumParameter(); i++) {
      Optional<Formula> fArg = getArg(i).subtype(m.getParameter(i).getTypeAccess());
      if (fArg.isPresent()) {
        f = f.multiply(fArg.get());
      } else {
        return Optional.empty();
      }

      // check against version parameters
      SimpleSet<TypeDecl> set = m.getParameter(i).getTypeAccess().map(qualifierVerMap);
      if (set.isSingleton()) {
        TypeDecl boundType = set.singletonValue();
        boolean applicable = false;
        for (TypeDecl argType: getArg(i).typeSet()) {
          Optional<Formula> argCheck = argType.versionInstanceOf(boundType, getArg(i));
          if (argCheck.isPresent()) {
            applicable = true;
            f = f.multiply(argCheck.get());
          }
        }
        if (!applicable) {
          return Optional.empty();
        }
      }
    }

    return Optional.of(f);
  }

  eq ParVersionMethodAccess.verApplicableAndAccessible(MethodDecl m, TypeDecl t) {
    if (m.numVersionVariable() != getNumVersionArgument()) {
      return Optional.empty();
    }

    GenericVersionMethodDecl gM = (GenericVersionMethodDecl) m;
    Iterator<VersionVariable> iterator = gM.versionVariableList().iterator();
    int i = 0;
    while (iterator.hasNext()) {
      VersionVariable v = iterator.next();
      VersionArgument a = getVersionArgument(i);
      if (a.isVersionNumArgument()) {
        if (!a.checkRanges(v)) {
          return Optional.empty();
        }
      }
    }

    return super.verApplicableAndAccessible(m, t);
  }

}

aspect MemberMethods {

  syn java.util.List<MethodDecl> TypeDecl.eagerLocalMethods() {
    if (getNumBodyDecl() == 0) {
      return Collections.emptyList();
    }
    ArrayList<MethodDecl> methods = new ArrayList<MethodDecl>(getNumBodyDecl());
    for (BodyDecl decl : getBodyDeclList()) {
      if (decl.isMethodDecl()) {
        methods.add((MethodDecl) decl);
      }
    }
    return methods;
  }

}