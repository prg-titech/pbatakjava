aspect Version {

  syn String TypeDecl.version() = "-1";

  eq VersionClassDecl.version() = getVersion().getID();

  syn String VersionArgument.version();

  eq VersionVarArgument.version() = getID();

  eq VersionNumArgument.version() = getID();

  syn Map<String,VersionArgument> Expr.verMap(TypeDecl t) = new HashMap();

  eq ParVersionTypeAccess.verMap(TypeDecl t) = t.verMap(this);

  eq ClassInstanceExpr.verMap(TypeDecl t) = getAccess().verMap(t);

  eq VarAccess.verMap(TypeDecl t) = decl().verMap(t);

  syn Map<String,VersionArgument> Variable.verMap(TypeDecl t);

  eq Declarator.verMap(TypeDecl t) = declarationType().verMap(t);

  eq CatchParameterDeclaration.verMap(TypeDecl t) = new HashMap();  // ignore

  eq EnumConstant.verMap(TypeDecl t) = new HashMap();  // ignore

  eq InferredParameterDeclaration.verMap(TypeDecl t) = new HashMap();   // ignore

  eq ParameterDeclaration.verMap(TypeDecl t) = getTypeAccess().verMap(t);
  
  syn Map<String,VersionArgument> MethodAccess.verMap(MethodDecl m) = new HashMap();

  eq ParVersionMethodAccess.verMap(MethodDecl m) = m.verMap(this);

  public Map<String,VersionArgument> TypeDecl.verMap(ParVersionTypeAccess access) {
    return new HashMap();
  }

  public Map<String,VersionArgument> GenericVersionClassDecl.verMap(ParVersionTypeAccess access) {
    Map<String,VersionArgument> map = new HashMap();
    for (int i = 0; i < getNumVersionVariable(); i++) {
      map.put(getVersionVariable(i).getID(), access.getVersionArgument(i));
    }
    return map;
  }

  public Map<String,VersionArgument> MethodDecl.verMap(ParVersionMethodAccess access) {
    return new HashMap();
  }

  public Map<String,VersionArgument> GenericVersionMethodDecl.verMap(ParVersionMethodAccess access) {
    Map<String,VersionArgument> map = new HashMap();
    for (int i = 0; i < getNumVersionVariable(); i++) {
      map.put(getVersionVariable(i).getID(), access.getVersionArgument(i));
    }
    return map;
  }

  // only assuming num argument for now
  public SimpleSet<TypeDecl> Access.map(Map<String,VersionArgument> verMap) {
    return emptySet();
  }

  public SimpleSet<TypeDecl> VersionTypeAccess.map(Map<String,VersionArgument> verMap) {
    SimpleSet<TypeDecl> set = emptySet();
    VersionArgument verArg = verMap.get(getVersionArgument().version());
    if (verArg instanceof VersionNumArgument) {
      String arg = verArg.version();
      for (TypeDecl type: typeSet()) {
        if (type.version().equals(arg)) {
          return set.add(type);
        }
      }
      throw new Error("Not supported for " + prettyPrint());
    }
    // TODO: handle version var argument
    return set;
  }

  syn Integer TypeDecl.numVersionVariable() = 0;

  eq GenericVersionClassDecl.numVersionVariable() = getNumVersionVariable();

  syn List<VersionVariable> TypeDecl.versionVariableList() = new List();

  eq GenericVersionClassDecl.versionVariableList() = getVersionVariableList();

  syn Integer MethodDecl.numVersionVariable() = 0;
  
  eq GenericVersionMethodDecl.numVersionVariable() = getNumVersionVariable();

  syn List<VersionVariable> MethodDecl.versionVariableList() = new List();

  eq GenericVersionMethodDecl.versionVariableList() = getVersionVariableList();

  syn lazy boolean VersionArgument.isVersionNumArgument() = false;

  eq VersionNumArgument.isVersionNumArgument() = true;

  syn boolean VersionArgument.isVersionVarArgument() = false;

  eq VersionVarArgument.isVersionVarArgument() = true;

  syn lazy boolean ParVersionTypeAccess.hasVersionNumArgument() {
    for (int i = 0; i < getNumVersionArgument(); i++) {
      if (getVersionArgument(i).isVersionNumArgument()) {
        return true;
      }
    }
    return false;
  }

}