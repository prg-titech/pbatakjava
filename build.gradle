plugins {
  id 'java'
  id 'org.jastadd' version '1.13.3'
}

defaultTasks 'jar'

if (!file('extendj/jastadd_modules').exists()) {
  throw new GradleException('ExtendJ seems to be missing. Please run "git submodule init", then "git submodule update".')
}

jastadd {
  configureModuleBuild()

  modules {
    include("extendj/jastadd_modules") // Include core ExtendJ modules.

    module "pbatakjava", {
      imports "java8 frontend" // ExtendJ dependency for template module.
      imports "java8 backend"

      jastadd {
        basedir "batakjava"
        include "**/syntax/*.ast"
        include "**/frontend/*.jrag"
        include "**/frontend/*.jadd"
        include "**/constraint/*.jrag"
        include "**/backend/*.jrag"
      }

      scanner {
        basedir "batakjava/syntax"
        include "**/*.flex"
      }

      parser {
        basedir "batakjava/syntax"
        include "**/*.parser"
      }
    }
  }

  // Target module to build:
  module = 'pbatakjava'

  astPackage = 'org.extendj.ast'
  parser.name = 'JavaParser'
  scanner.name = 'OriginalScanner'
}

sourceSets.main {
  java {
    srcDir 'extendj/src/frontend-main'
    srcDir 'extendj/src/backend-main'
    srcDir 'src/frontend-main'
    srcDir 'src/backend-main'
  }
  resources {
    srcDir 'extendj/src/res'
    srcDir jastadd.buildInfoDir
  }
}

repositories.mavenLocal()
dependencies {
  compile 'com.microsoft:z3:4.8.10'
  compile 'org.choco-solver:choco-solver:4.10.5'
  compile 'com.google.guava:guava:30.1-jre'
}

jar {
  from {
    configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
  }
}

// Use JavaCompiler if you need bytecode generation.
//jar.manifest.attributes 'Main-Class': 'org.extendj.JavaChecker'
//jar.manifest.attributes 'Main-Class': 'org.extendj.JavaCompiler'
//jar.manifest.attributes 'Main-Class': 'org.batakjava.BatakjavaChecker'
jar.manifest.attributes 'Main-Class': 'org.batakjava.BatakjavaCompiler'
//jar.manifest.attributes 'Main-Class': 'org.batakjava.DependencyChecker'
jar.destinationDir = projectDir

// Java -source and -target version.
sourceCompatibility = targetCompatibility = '1.8'

task sourceZip(type: Zip) {
  description 'Builds a Zip file with the entire repisotory (including the ExtendJ submodule).'
  destinationDir = projectDir
  archiveName = "pbatakjava-src.zip"

  from (projectDir) {
    exclude '**/.git'
    exclude '**/.gitignore'
    exclude '**/.gitattributes'
    exclude '**/.gitmodules'
    exclude 'build'
    exclude 'bin'
    exclude '.gradle'
    exclude '.classpath'
    exclude '.settings'
    exclude '.project'
    exclude '*.jar'
    exclude '*.zip'
    exclude '**/*.swp'
  }

  into 'pbatakjava'
}
