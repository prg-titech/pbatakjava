
public interface HashValue {
  public int getVal();

  public boolean equals(HashValue o);
}

public interface HashValue_Factory {
  public HashValue make(int val);
}

public class HashValue_v2 implements HashValue {
  private int val;

  public HashValue_v2(int val) {
    this.val = val;
  }

  public int getVal() {
    return this.val;
  }

  public boolean equals(HashValue o) {
    return this.getVal() == o.getVal();
  }
}

public class HashValue_v2_Factory implements HashValue_Factory {
  public HashValue make(int val) {
    return new HashValue_v2(val);
  }
}

public class HashValue_v1 implements HashValue {
  private int val;

  public HashValue_v1(int val) {
    this.val = val;
  }

  public int getVal() {
    return this.val;
  }

  public boolean equals(HashValue o) {
    return this.getVal() == o.getVal();
  }
}

public class HashValue_v1_Factory implements HashValue_Factory {
  public HashValue make(int val) {
    return new HashValue_v1(val);
  }
}

public interface Hash {
  public HashValue mkHash(String s);

  public boolean match(String s, HashValue h);
}

public interface Hash_Factory {
  public Hash make();
}

public class Hash_v1 implements Hash {
  public Hash_v1() {
  }

  public HashValue mkHash(String s) {
    if (s.equals("a")) {
      return new HashValue_v1(1);
    }
    return new HashValue_v1(0);
  }

  public boolean match(String s, HashValue h) {
    return this.mkHash(s).equals(h);
  }
}

public class Hash_v1_Factory implements Hash_Factory {
  public Hash make() {
    return new Hash_v1();
  }
}

public class Hash_v2 implements Hash {
  public Hash_v2() {
  }

  public HashValue mkHash(String s) {
    if (s.equals("a")) {
      return new HashValue_v2(-1);
    }
    return new HashValue_v2(0);
  }

  public boolean match(String s, HashValue h) {
    return this.mkHash(s).equals(h);
  }
}

public class Hash_v2_Factory implements Hash_Factory {
  public Hash make() {
    return new Hash_v2();
  }
}

public interface Dir {
  public String[] getFiles();

  public boolean exists(HashValue h);
}

public interface Dir_Factory {
}

public class Dir_v1 implements Dir {
  public HashValue_Factory V;

  public Hash_Factory W;

  public String[] getFiles() {
    String[] files = new String[1];
    files[0] = "a";
    return files;
  }

  public boolean exists(HashValue h) {
    String[] fs = this.getFiles();
    Hash hash = W.make();
    for (int i = 0; i < fs.length; i++) {
      if (hash.match(fs[i], h)) {
        return true;
      }
    }
    return false;
  }
}

public class Dir_v1_Factory implements Dir_Factory {
}
